;; Object libzjh/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "libzjh/"
  :tables
  (list
    (semanticdb-table "deck.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("algorithm" include (:system-flag t) nil [1 21])
            ("deck.h" include nil nil [22 39])
            ("card_arr" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{ 0x01, 0x11, 0x21, 0x31,		//A 14
		0x02, 0x12, 0x22, 0x32,		//2 15
		0x03, 0x13, 0x23, 0x33,		//3 3
		0x04, 0x14, 0x24, 0x34,		//4 4
		0x05, 0x15, 0x25, 0x35,		//5 5
		0x06, 0x16, 0x26, 0x36,		//6 6
		0x07, 0x17, 0x27, 0x37,		//7 7
		0x08, 0x18, 0x28, 0x38,		//8 8
		0x09, 0x19, 0x29, 0x39,		//9 9
		0x0A, 0x1A, 0x2A, 0x3A,		//10 10
		0x0B, 0x1B, 0x2B, 0x3B,		//J 11
		0x0C, 0x1C, 0x2C, 0x3C,		//Q 12
		0x0D, 0x1D, 0x2D, 0x3D,		//K 13
		}"
                :type "int")
                nil [41 505])
            ("fill" function
               (:parent "Deck"
                :type "void")
                nil [507 615])
            ("empty" function
               (:parent "Deck"
                :type "void")
                nil [617 655])
            ("size" function
               (:parent "Deck"
                :type "int")
                nil [657 705])
            ("push" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [723 733]))                  
                :type "bool")
                nil [707 775])
            ("pop" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable
                       (:reference 1
                        :type ("Card" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [792 803]))                  
                :type "bool")
                nil [777 893])
            ("myrandom" function
               (:arguments 
                  ( ("i" variable (:type "int") (reparse-symbol arg-sub-list) [908 914]))                  
                :type "int")
                nil [895 943])
            ("shuffle" function
               (:parent "Deck"
                :arguments 
                  ( ("seed" variable (:type "int") (reparse-symbol arg-sub-list) [964 973]))                  
                :type "bool")
                nil [945 1084])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1112 1133]))                  
                :type "void")
                nil [1086 1246])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1274 1295])
                    ("card_type" variable (:type "int") (reparse-symbol arg-sub-list) [1296 1310]))                  
                :type "void")
                nil [1248 1820])
            ("change_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1851 1872])
                    ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [1873 1881]))                  
                :type "void")
                nil [1822 2023])
            ("get_baozi_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2057 2078]))                  
                :type "void")
                nil [2025 2457])
            ("get_shunjin_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2493 2514]))                  
                :type "void")
                nil [2459 3012])
            ("get_jinhua_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3047 3068]))                  
                :type "void")
                nil [3014 3568])
            ("get_shunzi_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3603 3624]))                  
                :type "void")
                nil [3570 4180])
            ("get_duizi_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4214 4235]))                  
                :type "void")
                nil [4182 5120])
            ("get_danpai_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5155 5176]))                  
                :type "void")
                nil [5122 5964])
            ("delete_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("tmp" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("Card" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5990 6013]))                  
                :type "void")
                nil [5966 6249])
            ("debug" function
               (:parent "Deck"
                :type "void")
                nil [6251 6299]))          
      :file "deck.cc"
      :pointmax 6300
      :fsize 6299
      :lastmodtime '(22144 37962 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "card.h"
      :file "card.h"
      :fsize 2725
      :lastmodtime '(22144 37962 0 0))
    (semanticdb-table "deck.h"
      :file "deck.h"
      :fsize 901
      :lastmodtime '(22144 37962 0 0))
    (semanticdb-table "hole_cards.h"
      :file "hole_cards.h"
      :fsize 539
      :lastmodtime '(22144 37962 0 0))
    (semanticdb-table "card_type.h"
      :major-mode 'c++-mode
      :tags 
        '( ("_CARD_TYPE_H_" variable (:constant-flag t) nil [31 44])
            ("CardType" type
               (:members 
                  ( ("CARD_TYPE_ERROR" variable
                       (:constant-flag t
                        :default-value (81 82)
                        :type "int")
                        (reparse-symbol enumsubparts) [63 82])
                    ("CARD_TYPE_BAOZI" variable
                       (:constant-flag t
                        :default-value (113 114)
                        :type "int")
                        (reparse-symbol enumsubparts) [95 114])
                    ("CARD_TYPE_SHUNJIN" variable
                       (:constant-flag t
                        :default-value (145 146)
                        :type "int")
                        (reparse-symbol enumsubparts) [125 146])
                    ("CARD_TYPE_JINHUA" variable
                       (:constant-flag t
                        :default-value (179 180)
                        :type "int")
                        (reparse-symbol enumsubparts) [160 180])
                    ("CARD_TYPE_SHUNZI" variable
                       (:constant-flag t
                        :default-value (210 211)
                        :type "int")
                        (reparse-symbol enumsubparts) [191 211])
                    ("CARD_TYPE_DUIZI" variable
                       (:constant-flag t
                        :default-value (243 244)
                        :type "int")
                        (reparse-symbol enumsubparts) [225 244])
                    ("CARD_TYPE_DANPAI" variable
                       (:constant-flag t
                        :default-value (274 275)
                        :type "int")
                        (reparse-symbol enumsubparts) [255 275])
                    ("CARD_TYPE_TESHU" variable
                       (:constant-flag t
                        :default-value (304 305)
                        :type "int")
                        (reparse-symbol enumsubparts) [286 305]))                  
                :type "enum")
                nil [46 323]))          
      :file "card_type.h"
      :pointmax 352
      :fsize 387
      :lastmodtime '(22144 37962 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("_CARD_TYPE_H_")
          )
))
  :file "!usr!local!zjhapp!newcaipiao!libzjh!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
