;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "collections.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 390])
            ("keyword" include nil nil [391 434])
            ("sys" include nil nil [435 453])
            ("heapq" include nil nil [454 476])
            ("itertools" include nil nil [477 554])
            ("itertools" include nil nil [555 590])
            ("try" code nil nil [592 717])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [927 970])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1573 1776])
                            ("if" code nil (reparse-symbol indented_block_body) [1785 1924])
                            ("self" variable nil (reparse-symbol indented_block_body) [1932 1946])
                            ("args" variable nil (reparse-symbol indented_block_body) [1955 1970])
                            ("if" code nil (reparse-symbol indented_block_body) [1979 2077])
                            ("try" code nil (reparse-symbol indented_block_body) [2085 2286])
                            ("self" code nil (reparse-symbol indented_block_body) [2294 2322]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [1549 1554])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1556 1562]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1536 2323])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2344 2348])
                            ("key" variable nil (reparse-symbol function_parameters) [2350 2353])
                            ("value" variable nil (reparse-symbol function_parameters) [2355 2360])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2362 2374]))                          )
                        (reparse-symbol indented_block_body) [2328 2796])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2817 2821])
                            ("key" variable nil (reparse-symbol function_parameters) [2823 2826])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2828 2840]))                          )
                        (reparse-symbol indented_block_body) [2801 3311])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3329 3333]))                          )
                        (reparse-symbol indented_block_body) [3316 3714])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3736 3740]))                          )
                        (reparse-symbol indented_block_body) [3719 4140])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4155 4159]))                          )
                        (reparse-symbol indented_block_body) [4145 4335])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4424 4428]))                          )
                        (reparse-symbol indented_block_body) [4415 4499])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4515 4519]))                          )
                        (reparse-symbol indented_block_body) [4504 4611])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4626 4630]))                          )
                        (reparse-symbol indented_block_body) [4616 4740])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4758 4762]))                          )
                        (reparse-symbol indented_block_body) [4745 4850])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4870 4874]))                          )
                        (reparse-symbol indented_block_body) [4855 4987])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5006 5010]))                          )
                        (reparse-symbol indented_block_body) [4992 5139])
                    ("update" variable nil (reparse-symbol indented_block_body) [5144 5174])
                    ("__update" variable nil (reparse-symbol indented_block_body) [5180 5197])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5262 5281])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5295 5299])
                            ("key" variable nil (reparse-symbol function_parameters) [5301 5304])
                            ("default" variable nil (reparse-symbol function_parameters) [5306 5313]))                          )
                        (reparse-symbol indented_block_body) [5287 5717])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5737 5741])
                            ("key" variable nil (reparse-symbol function_parameters) [5743 5746])
                            ("default" variable nil (reparse-symbol function_parameters) [5748 5755]))                          )
                        (reparse-symbol indented_block_body) [5722 5946])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5963 5967])
                            ("last" variable nil (reparse-symbol function_parameters) [5969 5973]))                          )
                        (reparse-symbol indented_block_body) [5951 6335])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6353 6357])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6359 6372]))                          )
                        (reparse-symbol indented_block_body) [6340 6781])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6801 6805]))                          )
                        (reparse-symbol indented_block_body) [6786 7131])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7145 7149]))                          )
                        (reparse-symbol indented_block_body) [7136 7232])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7267 7270])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7272 7280])
                            ("value" variable nil (reparse-symbol function_parameters) [7282 7287]))                          )
                        (reparse-symbol indented_block_body) [7237 7537])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7553 7557])
                            ("other" variable nil (reparse-symbol function_parameters) [7559 7564]))                          )
                        (reparse-symbol indented_block_body) [7542 7889])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7905 7909])
                            ("other" variable nil (reparse-symbol function_parameters) [7911 7916]))                          )
                        (reparse-symbol indented_block_body) [7894 7986])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8081 8085]))                          )
                        (reparse-symbol indented_block_body) [8068 8193])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8213 8217]))                          )
                        (reparse-symbol indented_block_body) [8198 8323])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8342 8346]))                          )
                        (reparse-symbol indented_block_body) [8328 8457]))                  
                :type "class")
                nil [898 8457])
            ("_class_template" variable nil nil [8637 10085])
            ("_repr_template" variable nil nil [10087 10115])
            ("_field_template" variable nil nil [10117 10230])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10247 10255])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10257 10268])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10270 10277])
                    ("rename" variable nil (reparse-symbol function_parameters) [10285 10291]))                  )
                nil [10232 14417])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [14604 16305])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [16676 17203])
                            ("if" code nil (reparse-symbol indented_block_body) [17212 17347])
                            ("self" variable nil (reparse-symbol indented_block_body) [17355 17369])
                            ("args" variable nil (reparse-symbol indented_block_body) [17378 17393])
                            ("if" code nil (reparse-symbol indented_block_body) [17402 17500])
                            ("super" code nil (reparse-symbol indented_block_body) [17508 17539])
                            ("self" code nil (reparse-symbol indented_block_body) [17548 17574]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [16652 16657])
                            ("kwds" variable nil (reparse-symbol function_parameters) [16659 16665]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16639 17575])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17596 17600])
                            ("key" variable nil (reparse-symbol function_parameters) [17602 17605]))                          )
                        (reparse-symbol indented_block_body) [17580 17753])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17774 17778])
                            ("n" variable nil (reparse-symbol function_parameters) [17780 17781]))                          )
                        (reparse-symbol indented_block_body) [17758 18267])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18285 18289]))                          )
                        (reparse-symbol indented_block_body) [18272 19090])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19170 19173])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19175 19183])
                            ("v" variable nil (reparse-symbol function_parameters) [19185 19186]))                          )
                        (reparse-symbol indented_block_body) [19140 19449])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [19465 19470])
                        ("kwds" variable nil (reparse-symbol function_parameters) [19472 19478]))                      ) (reparse-symbol indented_block_body) [19454 21320])
                    ("subtract" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21338 21343])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21345 21351]))                      ) (reparse-symbol indented_block_body) [21325 22788])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22802 22806]))                          )
                        (reparse-symbol indented_block_body) [22793 22878])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22898 22902]))                          )
                        (reparse-symbol indented_block_body) [22883 22950])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22971 22975])
                            ("elem" variable nil (reparse-symbol function_parameters) [22977 22981]))                          )
                        (reparse-symbol indented_block_body) [22955 23142])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23160 23164]))                          )
                        (reparse-symbol indented_block_body) [23147 23370])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23727 23731])
                            ("other" variable nil (reparse-symbol function_parameters) [23733 23738]))                          )
                        (reparse-symbol indented_block_body) [23715 24288])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24305 24309])
                            ("other" variable nil (reparse-symbol function_parameters) [24311 24316]))                          )
                        (reparse-symbol indented_block_body) [24293 24895])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24911 24915])
                            ("other" variable nil (reparse-symbol function_parameters) [24917 24922]))                          )
                        (reparse-symbol indented_block_body) [24900 25569])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25586 25590])
                            ("other" variable nil (reparse-symbol function_parameters) [25592 25597]))                          )
                        (reparse-symbol indented_block_body) [25574 26093]))                  
                :type "class")
                nil [14579 26093])
            ("if" code nil nil [26095 27262]))          
      :file "collections.py"
      :pointmax 27262
      :fsize 27261
      :lastmodtime '(22127 55177 0 0)
      :unmatched-syntax '((NAME 26720 . 26730) (PAREN_BLOCK 26730 . 26746) (NAME 26378 . 26388) (PAREN_BLOCK 26388 . 26404) (NAME 25945 . 25953) (IF 25962 . 25964) (ELSE 25985 . 25989) (NAME 25295 . 25303) (IF 25318 . 25320) (ELSE 25341 . 25345) (NAME 22368 . 22376) (IF 22387 . 22389) (ELSE 22395 . 22399) (NAME 20707 . 20715) (IF 20726 . 20728) (ELSE 20734 . 20738) (INDENT_BLOCK 13855 . 13919) (NEWLINE 13854 . 13855) (COLON 13853 . 13854) (TRY 13778 . 13781) (AS 13849 . 13851) (NAME 25945 . 25953) (IF 25962 . 25964) (ELSE 25985 . 25989) (NAME 25295 . 25303) (IF 25318 . 25320) (ELSE 25341 . 25345) (NAME 22368 . 22376) (IF 22387 . 22389) (ELSE 22395 . 22399) (NAME 20707 . 20715) (IF 20726 . 20728) (ELSE 20734 . 20738) (INDENT_BLOCK 13855 . 13919) (NEWLINE 13854 . 13855) (COLON 13853 . 13854) (TRY 13778 . 13781) (AS 13849 . 13851))))
  :file "!usr!local!Cellar!python!2.7.11!Frameworks!Python.framework!Versions!2.7!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
