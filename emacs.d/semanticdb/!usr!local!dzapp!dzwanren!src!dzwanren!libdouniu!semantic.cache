;; Object libdouniu/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "libdouniu/"
  :tables
  (list
    (semanticdb-table "hole_cards.h"
      :major-mode 'c++-mode
      :tags 
        '( ("_HOLE_CARDS_H_" variable (:constant-flag t) nil [32 46])
            ("vector" include (:system-flag t) nil [48 65])
            ("algorithm" include (:system-flag t) nil [66 86])
            ("card.h" include nil nil [88 105])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [107 127])
            ("HoleCards" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [147 154])
                    ("HoleCards" function
                       (:prototype-flag t
                        :constructor-flag t
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [156 168])
                    ("delete_card" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [200 219])
                    ("sort" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [223 235])
                    ("analysis" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [239 255])
                    ("clear" function (:type "void") (reparse-symbol classsubparts) [322 392])
                    ("debug" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [478 491])
                    ((("cards" 0 nil nil nil)) variable (:type ("std::vector" type (:template-specifier (("Card" type nil nil nil)) :type "class") nil nil)) (reparse-symbol classsubparts) [630 654])
                    ((("kicker" 0 nil nil nil)) variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol classsubparts) [656 668])
                    ((("oldcards" 0 nil nil nil)) variable (:type ("std::vector" type (:template-specifier (("Card" type nil nil nil)) :type "class") nil nil)) (reparse-symbol classsubparts) [670 697])
                    ((("card_type" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [701 715])
                    ((("ratio" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [717 727]))                  
                :type "class")
                nil [129 730]))          
      :file "hole_cards.h"
      :pointmax 760
      :fsize 759
      :lastmodtime '(22015 41842 0 0)
      :unmatched-syntax '((punctuation 626 . 627) (semantic-list 584 . 626) (symbol 571 . 584) (INT 567 . 570) (STATIC 560 . 566) (punctuation 554 . 555) (semantic-list 516 . 554) (symbol 509 . 516) (BOOL 504 . 508) (STATIC 497 . 503) (punctuation 474 . 475) (semantic-list 453 . 474) (symbol 443 . 453) (VOID 438 . 442) (punctuation 434 . 435) (semantic-list 412 . 434) (symbol 402 . 412) (VOID 397 . 401) (punctuation 392 . 393) (punctuation 318 . 319) (semantic-list 308 . 318) (symbol 295 . 308) (VOID 290 . 294) (punctuation 285 . 286) (semantic-list 270 . 285) (symbol 263 . 270) (INT 259 . 262) (punctuation 193 . 194) (semantic-list 185 . 193) (symbol 177 . 185) (VOID 172 . 176))
      :lexical-table 
        '(("_HOLE_CARDS_H_")
          )
)
    (semanticdb-table "card.h"
      :major-mode 'c++-mode
      :tags 
        '( ("_CARD_H_" variable (:constant-flag t) nil [26 34])
            ("string" include (:system-flag t) nil [36 53])
            ("iostream" include (:system-flag t) nil [54 73])
            ("cstdio" include (:system-flag t) nil [74 91])
            ("vector" include (:system-flag t) nil [92 109])
            ("map" include (:system-flag t) nil [110 124])
            ("algorithm" include (:system-flag t) nil [125 145])
            ("card_type.h" include nil nil [147 169])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [171 191])
            ("Card" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [875 882])
                    ((((0) "Face")) type (:superclasses ("" type (:members (("Ace" variable (:constant-flag t :default-value (907 908) :type "int") (reparse-symbol enumsubparts) [901 908]) ("Two" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [912 916]) ("Three" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [919 925]) ("Four" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [928 933]) ("Five" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [936 941]) ("Six" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [944 948]) ("Seven" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [951 957]) ("Eight" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [960 966]) ("Nine" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [969 974]) ("Ten" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [977 981]) ("Jack" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [984 989]) ("Queen" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [992 998]) ("King" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1001 1006]) ("FirstFace" variable (:constant-flag t :default-value (1022 1025) :type "int") (reparse-symbol enumsubparts) [1010 1025]) ("LastFace" variable (:constant-flag t :default-value (1040 1044) :type "int") (reparse-symbol enumsubparts) [1029 1044])) :type "enum") nil nil) :type "typedef") (reparse-symbol classsubparts) [884 1053])
                    ((((0) "Suit")) type (:superclasses ("" type (:members (("Diamonds" variable (:constant-flag t :default-value (1085 1086) :type "int") (reparse-symbol enumsubparts) [1074 1086]) ("Clubs" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1090 1096]) ("Hearts" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1099 1106]) ("Spades" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1109 1116]) ("FirstSuit" variable (:constant-flag t :default-value (1134 1142) :type "int") (reparse-symbol enumsubparts) [1122 1142]) ("LastSuit" variable (:constant-flag t :default-value (1157 1163) :type "int") (reparse-symbol enumsubparts) [1146 1163])) :type "enum") nil nil) :type "typedef") (reparse-symbol classsubparts) [1057 1172])
                    ((("face" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [1176 1185])
                    ((("suit" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [1187 1196])
                    ((("value" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [1200 1210])
                    ((("point" 0 nil nil nil)) variable (:type "int") (reparse-symbol classsubparts) [1212 1222])
                    ("Card" function
                       (:prototype-flag t
                        :constructor-flag t
                        :type ("Card" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1226 1233])
                    ("get_card" function
                       (:prototype-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1279 1302]))                  
                :type "class")
                nil [862 2882]))          
      :file "card.h"
      :pointmax 2906
      :fsize 2921
      :lastmodtime '(22015 41842 0 0)
      :unmatched-syntax '((semantic-list 2669 . 2879) (semantic-list 2621 . 2667) (symbol 2611 . 2621) (VOID 2606 . 2610) (STATIC 2599 . 2605) (semantic-list 2394 . 2595) (semantic-list 2348 . 2392) (symbol 2338 . 2348) (VOID 2333 . 2337) (STATIC 2326 . 2332) (semantic-list 2266 . 2322) (semantic-list 2242 . 2264) (symbol 2224 . 2242) (VOID 2219 . 2223) (STATIC 2212 . 2218) (semantic-list 2153 . 2208) (semantic-list 2129 . 2151) (symbol 2112 . 2129) (VOID 2107 . 2111) (STATIC 2100 . 2106) (semantic-list 2020 . 2096) (semantic-list 1988 . 2018) (symbol 1972 . 1988) (BOOL 1967 . 1971) (STATIC 1960 . 1966) (semantic-list 1879 . 1956) (semantic-list 1847 . 1877) (symbol 1832 . 1847) (BOOL 1827 . 1831) (STATIC 1820 . 1826) (semantic-list 1565 . 1817) (semantic-list 1533 . 1563) (symbol 1526 . 1533) (INT 1522 . 1525) (STATIC 1515 . 1521) (punctuation 1510 . 1511) (semantic-list 1482 . 1510) (CONST 1476 . 1481) (semantic-list 1460 . 1475) (punctuation 1458 . 1459) (punctuation 1457 . 1458) (OPERATOR 1448 . 1456) (BOOL 1443 . 1447) (punctuation 1440 . 1441) (semantic-list 1413 . 1440) (CONST 1407 . 1412) (semantic-list 1391 . 1406) (punctuation 1388 . 1389) (OPERATOR 1379 . 1387) (BOOL 1374 . 1378) (punctuation 1371 . 1372) (semantic-list 1344 . 1371) (CONST 1339 . 1344) (semantic-list 1323 . 1338) (punctuation 1320 . 1321) (OPERATOR 1311 . 1319) (BOOL 1306 . 1310) (punctuation 1274 . 1275) (semantic-list 1265 . 1274) (symbol 1256 . 1265) (VOID 1251 . 1255) (punctuation 1248 . 1249) (semantic-list 1239 . 1248) (symbol 1235 . 1239))
      :lexical-table 
        '(("_CARD_H_")
          )
)
    (semanticdb-table "deck.h"
      :file "deck.h"
      :fsize 1528
      :lastmodtime '(22015 41842 0 0))
    (semanticdb-table "hole_cards.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("card.h" include nil nil [1 18])
            ("card_type.h" include nil nil [19 41])
            ("hole_cards.h" include nil nil [42 65])
            ("card_type_str" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
	(char *)\"CARD_TYPE_NONNIU\",
	(char *)\"CARD_TYPE_NIUDING\",
	(char *)\"CARD_TYPE_NIUER\",
	(char *)\"CARD_TYPE_NIUSAN\",
	(char *)\"CARD_TYPE_NIUSI\",
	(char *)\"CARD_TYPE_NIUWU\",
	(char *)\"CARD_TYPE_NIULIU\",
	(char *)\"CARD_TYPE_NIUQI\",
	(char *)\"CARD_TYPE_NIUBA\",
	(char *)\"CARD_TYPE_NIUJIU\",
	(char *)\"CARD_TYPE_NIUNIU\",
	(char *)\"CARD_TYPE_ZHADAN\",
    (char *)\"CARD_TYPE_JINNIU\",
	(char *)\"CARD_TYPE_WUXIAONIU\"
}"
                :type "char")
                nil [67 516])
            ("HoleCards" function
               (:constructor-flag t
                :parent "HoleCards"
                :type ("HoleCards" type (:type "class") nil nil))
                nil [518 572])
            ("add_card" function
               (:parent "HoleCards"
                :arguments 
                  ( ("card" variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [599 609]))                  
                :type "void")
                nil [574 667])
            ("sort" function
               (:parent "HoleCards"
                :type "void")
                nil [669 729])
            ("analysis" function
               (:parent "HoleCards"
                :type "void")
                nil [731 4547])
            ("compare" function
               (:parent "HoleCards"
                :arguments 
                  ( ("hc" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4572 4586]))                  
                :type "int")
                nil [4549 4896])
            ("qsort_compare" function
               (:parent "HoleCards"
                :arguments 
                  ( ("pCards1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [4927 4947])
                    ("pCards2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [4948 4968]))                  
                :type "int")
                nil [4898 5194])
            ("compare" function
               (:parent "HoleCards"
                :arguments 
                  ( ("cards1" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5220 5238])
                    ("cards2" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5239 5257]))                  
                :type "bool")
                nil [5196 5405])
            ("set_card_type" function
               (:parent "HoleCards"
                :arguments 
                  ( ("type" variable (:type "int") (reparse-symbol arg-sub-list) [5437 5446]))                  
                :type "void")
                nil [5407 5469])
            ("copy_cards" function
               (:parent "HoleCards"
                :arguments 
                  ( ("v" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("Card" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5498 5519]))                  
                :type "void")
                nil [5471 5535])
            ("copy_cards" function
               (:parent "HoleCards"
                :arguments 
                  ( ("v" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5564 5584]))                  
                :type "void")
                nil [5537 5674])
            ("debug" function
               (:parent "HoleCards"
                :type "void")
                nil [5676 5785])
            ("delete_card" function
               (:parent "HoleCards"
                :type "void")
                nil [5787 5867]))          
      :file "hole_cards.cc"
      :pointmax 5868
      :fsize 5867
      :lastmodtime '(22015 41842 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "card_type.h"
      :file "card_type.h"
      :fsize 802
      :lastmodtime '(22015 41842 0 0))
    (semanticdb-table "deck.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("algorithm" include (:system-flag t) nil [1 21])
            ("deck.h" include nil nil [22 39])
            ("card_arr" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
    0x01, 0x11, 0x21, 0x31,		//A 14 
    0x02, 0x12, 0x22, 0x32,		//2 15
    0x03, 0x13, 0x23, 0x33,		//3 3
    0x04, 0x14, 0x24, 0x34,		//4 4
    0x05, 0x15, 0x25, 0x35,		//5 5
    0x06, 0x16, 0x26, 0x36,		//6 6
    0x07, 0x17, 0x27, 0x37,		//7 7
    0x08, 0x18, 0x28, 0x38,		//8 8
    0x09, 0x19, 0x29, 0x39,		//9 9
    0x0A, 0x1A, 0x2A, 0x3A,		//10 10
    0x0B, 0x1B, 0x2B, 0x3B,		//J 11
    0x0C, 0x1C, 0x2C, 0x3C,		//Q 12
    0x0D, 0x1D, 0x2D, 0x3D,		//K 13
}"
                :type "int")
                nil [41 532])
            ("fill" function
               (:parent "Deck"
                :type "void")
                nil [534 642])
            ("empty" function
               (:parent "Deck"
                :type "void")
                nil [644 682])
            ("count" function
               (:parent "Deck"
                :type "int")
                nil [684 733])
            ("push" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [751 761]))                  
                :type "bool")
                nil [735 803])
            ("pop" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable
                       (:reference 1
                        :type ("Card" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [820 831]))                  
                :type "bool")
                nil [805 923])
            ("shuffle" function
               (:parent "Deck"
                :arguments 
                  ( ("seed" variable (:type "int") (reparse-symbol arg-sub-list) [944 953]))                  
                :type "bool")
                nil [925 1046])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1073 1094]))                  
                :type "int")
                nil [1048 1281])
            ("change_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [1312 1320])
                    ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1321 1342]))                  
                :type "void")
                nil [1283 1485])
            ("has_hole_cards" function
               (:parent "Deck"
                :type "bool")
                nil [1487 1616])
            ("debug" function
               (:parent "Deck"
                :type "void")
                nil [1618 1666])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1693 1714])
                    ("type" variable (:type "int") (reparse-symbol arg-sub-list) [1715 1724]))                  
                :type "int")
                nil [1668 3158])
            ("get_has_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3193 3214]))                  
                :type "int")
                nil [3160 3332])
            ("get_no_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3366 3387]))                  
                :type "int")
                nil [3334 3454])
            ("get_niu_jiu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3489 3510]))                  
                :type "int")
                nil [3456 3575])
            ("get_niu_ba_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3609 3630]))                  
                :type "int")
                nil [3577 3694])
            ("get_niu_qi_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3728 3749]))                  
                :type "int")
                nil [3696 3813])
            ("get_niu_liu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3848 3869]))                  
                :type "int")
                nil [3815 3934])
            ("get_niu_wu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3968 3989]))                  
                :type "int")
                nil [3936 4053])
            ("get_niu_si_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4087 4108]))                  
                :type "int")
                nil [4055 4172])
            ("get_niu_san_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4207 4228]))                  
                :type "int")
                nil [4174 4293])
            ("get_niu_er_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4327 4348]))                  
                :type "int")
                nil [4295 4412])
            ("get_niu_ding_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4448 4469]))                  
                :type "int")
                nil [4414 4535])
            ("get_zhadan_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4569 4590]))                  
                :type "int")
                nil [4537 7871])
            ("get_wuhuaniu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7907 7928]))                  
                :type "int")
                nil [7873 9476])
            ("get_wuxiaoniu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9513 9534]))                  
                :type "int")
                nil [9478 11320])
            ("get_niu_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11355 11376]))                  
                :type "int")
                nil [11322 11441])
            ("deck_random" function
               (:parent "Deck"
                :arguments 
                  ( ("begin" variable (:type "int") (reparse-symbol arg-sub-list) [11465 11475])
                    ("end" variable (:type "int") (reparse-symbol arg-sub-list) [11476 11484]))                  
                :type "int")
                nil [11443 11558])
            ("delete_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("tmp" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("Card" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11584 11607]))                  
                :type "void")
                nil [11560 11980])
            ("get_hole_type_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12012 12033])
                    ("type" variable (:type "int") (reparse-symbol arg-sub-list) [12034 12043]))                  
                :type "int")
                nil [11982 14034])
            ("has_niu" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14055 14076]))                  
                :type "bool")
                nil [14036 14733]))          
      :file "deck.cc"
      :pointmax 14734
      :fsize 15313
      :lastmodtime '(22015 41842 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!dzapp!dzwanren!src!dzwanren!libdouniu!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
