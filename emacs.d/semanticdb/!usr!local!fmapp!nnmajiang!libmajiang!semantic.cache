;; Object libmajiang/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "libmajiang/"
  :tables
  (list
    (semanticdb-table "deck.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("algorithm" include (:system-flag t) nil [1 21])
            ("deck.h" include nil nil [22 39])
            ("FENG_SIZE" variable (:constant-flag t) nil [49 58])
            ("card_arr" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
  0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
  0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
  0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
  0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
}"
                :type "int")
                nil [63 302])
            ("Deck" function
               (:constructor-flag t
                :parent "Deck"
                :type ("Deck" type (:type "class") nil nil))
                nil [304 376])
            ("init" function
               (:parent "Deck"
                :arguments 
                  ( ("feng" variable (:type "int") (reparse-symbol arg-sub-list) [394 403])
                    ("gui" variable (:type "int") (reparse-symbol arg-sub-list) [404 412])
                    ("horse" variable (:type "int") (reparse-symbol arg-sub-list) [413 423])
                    ("duizi" variable (:type "int") (reparse-symbol arg-sub-list) [424 434]))                  
                :type "void")
                nil [378 525])
            ("fill" function
               (:parent "Deck"
                :type "void")
                nil [527 1115])
            ("empty" function
               (:parent "Deck"
                :type "void")
                nil [1117 1155])
            ("size" function
               (:parent "Deck"
                :type "int")
                nil [1157 1205])
            ("permit_get" function
               (:parent "Deck"
                :type "int")
                nil [1207 1310])
            ("push" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1328 1338]))                  
                :type "bool")
                nil [1312 1380])
            ("pop" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable
                       (:reference 1
                        :type ("Card" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1397 1408]))                  
                :type "bool")
                nil [1382 1498])
            ("myrandom" function
               (:arguments 
                  ( ("i" variable (:type "int") (reparse-symbol arg-sub-list) [1513 1519]))                  
                :type "int")
                nil [1500 1548])
            ("shuffle" function
               (:parent "Deck"
                :arguments 
                  ( ("seed" variable (:type "int") (reparse-symbol arg-sub-list) [1569 1578]))                  
                :type "bool")
                nil [1550 1815])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1843 1864]))                  
                :type "void")
                nil [1817 2019])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2047 2068])
                    ("card_type" variable (:type "int") (reparse-symbol arg-sub-list) [2069 2083]))                  
                :type "void")
                nil [2021 2647])
            ("change_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2678 2699])
                    ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [2700 2708]))                  
                :type "void")
                nil [2649 2850])
            ("delete_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("tmp" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("Card" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2876 2899]))                  
                :type "void")
                nil [2852 3131])
            ("debug" function
               (:parent "Deck"
                :type "void")
                nil [3133 3181])
            ("get_next_card" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3208 3229])
                    ("card_value" variable (:type "int") (reparse-symbol arg-sub-list) [3230 3245]))                  
                :type "void")
                nil [3183 3943])
            ("see_next_card" function
               (:parent "Deck"
                :type "int")
                nil [3945 4032]))          
      :file "deck.cc"
      :pointmax 4033
      :fsize 4032
      :lastmodtime '(22681 42283 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("FENG_SIZE" . ((number "7" 59 . 60) (punctuation ";" 60 . 61)))
          )
))
  :file "!usr!local!fmapp!nnmajiang!libmajiang!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
