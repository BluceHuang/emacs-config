;; Object TreeTest/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "TreeTest/"
  :tables (list 
   (semanticdb-table "treetest.c"
    :major-mode 'c-mode
    :tags 
        '( ("stdio.h" include (:system-flag t) nil [1 19])
            ("stdlib.h" include (:system-flag t) nil [20 39])
            ("tree.h" include nil nil [40 56])
            ("g_TreeHead" variable (:type "int") nil [79 90])
            ("RB_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("g_TreeHead" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [99 110]))                  
                :type "int")
                nil [91 111])
            ("left" variable (:type "int") nil [124 136])
            ("Sstree" type
               (:typedef ("tagSstree" type (:type "struct") nil nil)
                :superclasses "tagSstree"
                :type "typedef")
                nil [138 220])
            ("tagSstree" type
               (:members 
                  ( ("lefg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [169 180])
                    ("right" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [185 197])
                    ("data" variable (:type "int") (reparse-symbol classsubparts) [202 211]))                  
                :type "struct")
                nil [138 220])
            ("strlen" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [241 251]))                  
                :type "int")
                nil [230 332])
            ("ds" variable (:type ("Sstree" type (:type "class") nil nil)) nil [333 343])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [366 375])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [376 389]))                  
                :type "int")
                nil [357 581]))          
    :file "treetest.c"
    :pointmax 582
    :fsize 561
    :lastmodtime '(21580 32402 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tree.h"
    :major-mode 'c-mode
    :tags 
        '( ("_SYS_TREE_H_" variable (:constant-flag t) nil [1569 1581])
            ("sys/cdefs.h" include (:system-flag t) nil [1583 1605])
            ("SPLAY_HEAD" variable (:constant-flag t) nil [2763 2773])
            ("SPLAY_INITIALIZER" variable (:constant-flag t) nil [2878 2895])
            ("SPLAY_INIT" variable (:constant-flag t) nil [2928 2938])
            ("SPLAY_ENTRY" variable (:constant-flag t) nil [3024 3035])
            ("SPLAY_LEFT" variable (:constant-flag t) nil [3174 3184])
            ("SPLAY_RIGHT" variable (:constant-flag t) nil [3228 3239])
            ("SPLAY_ROOT" variable (:constant-flag t) nil [3284 3294])
            ("SPLAY_EMPTY" variable (:constant-flag t) nil [3327 3338])
            ("SPLAY_ROTATE_RIGHT" variable (:constant-flag t) nil [3454 3472])
            ("SPLAY_ROTATE_LEFT" variable (:constant-flag t) nil [3683 3700])
            ("SPLAY_LINKLEFT" variable (:constant-flag t) nil [3909 3923])
            ("SPLAY_LINKLEFT" variable (:constant-flag t) nil [3909 3923])
            ("SPLAY_LINKLEFT" variable (:constant-flag t) nil [3909 3923])
            ("SPLAY_LINKRIGHT" variable (:constant-flag t) nil [4127 4142])
            ("SPLAY_ASSEMBLE" variable (:constant-flag t) nil [4347 4361])
            ("SPLAY_PROTOTYPE" variable (:constant-flag t) nil [4754 4769])
            ("SPLAY_GENERATE" variable (:constant-flag t) nil [6086 6100])
            ("SPLAY_NEGINF" variable (:constant-flag t) nil [9916 9928])
            ("SPLAY_INF" variable (:constant-flag t) nil [9940 9949])
            ("SPLAY_INSERT" variable (:constant-flag t) nil [9961 9973])
            ("SPLAY_REMOVE" variable (:constant-flag t) nil [10020 10032])
            ("SPLAY_FIND" variable (:constant-flag t) nil [10079 10089])
            ("SPLAY_NEXT" variable (:constant-flag t) nil [10135 10145])
            ("SPLAY_MIN" variable (:constant-flag t) nil [10191 10200])
            ("SPLAY_MAX" variable (:constant-flag t) nil [10290 10299])
            ("SPLAY_FOREACH" variable (:constant-flag t) nil [10387 10400])
            ("RB_HEAD" variable (:constant-flag t) nil [10578 10585])
            ("RB_INITIALIZER" variable (:constant-flag t) nil [10690 10704])
            ("RB_INIT" variable (:constant-flag t) nil [10737 10744])
            ("RB_BLACK" variable (:constant-flag t) nil [10830 10838])
            ("RB_RED" variable (:constant-flag t) nil [10849 10855])
            ("RB_ENTRY" variable (:constant-flag t) nil [10867 10875])
            ("RB_LEFT" variable (:constant-flag t) nil [11103 11110])
            ("RB_RIGHT" variable (:constant-flag t) nil [11154 11162])
            ("RB_PARENT" variable (:constant-flag t) nil [11207 11216])
            ("RB_COLOR" variable (:constant-flag t) nil [11262 11270])
            ("RB_ROOT" variable (:constant-flag t) nil [11315 11322])
            ("RB_EMPTY" variable (:constant-flag t) nil [11356 11364])
            ("RB_SET" variable (:constant-flag t) nil [11406 11412])
            ("RB_SET_BLACKRED" variable (:constant-flag t) nil [11611 11626])
            ("RB_AUGMENT" variable (:constant-flag t) nil [11789 11799])
            ("RB_ROTATE_LEFT" variable (:constant-flag t) nil [11835 11849])
            ("RB_ROTATE_RIGHT" variable (:constant-flag t) nil [12574 12589])
            ("RB_PROTOTYPE" variable (:constant-flag t) nil [13363 13375])
            ("RB_PROTOTYPE_STATIC" variable (:constant-flag t) nil [13461 13480])
            ("RB_PROTOTYPE_INTERNAL" variable (:constant-flag t) nil [13581 13602])
            ("RB_GENERATE" variable (:constant-flag t) nil [14310 14321])
            ("RB_GENERATE_STATIC" variable (:constant-flag t) nil [14406 14424])
            ("RB_GENERATE_INTERNAL" variable (:constant-flag t) nil [14524 14544])
            ("RB_NEGINF" variable (:constant-flag t) nil [24451 24460])
            ("RB_INF" variable (:constant-flag t) nil [24472 24478])
            ("RB_INSERT" variable (:constant-flag t) nil [24490 24499])
            ("RB_REMOVE" variable (:constant-flag t) nil [24543 24552])
            ("RB_FIND" variable (:constant-flag t) nil [24596 24603])
            ("RB_NFIND" variable (:constant-flag t) nil [24645 24653])
            ("RB_NEXT" variable (:constant-flag t) nil [24696 24703])
            ("RB_PREV" variable (:constant-flag t) nil [24742 24749])
            ("RB_MIN" variable (:constant-flag t) nil [24788 24794])
            ("RB_MAX" variable (:constant-flag t) nil [24844 24850])
            ("RB_FOREACH" variable (:constant-flag t) nil [24898 24908])
            ("RB_FOREACH_FROM" variable (:constant-flag t) nil [25034 25049])
            ("RB_FOREACH_SAFE" variable (:constant-flag t) nil [25183 25198])
            ("RB_FOREACH_REVERSE" variable (:constant-flag t) nil [25350 25368])
            ("RB_FOREACH_REVERSE_FROM" variable (:constant-flag t) nil [25493 25516])
            ("RB_FOREACH_REVERSE_SAFE" variable (:constant-flag t) nil [25649 25672]))          
    :file "tree.h"
    :pointmax 25841
    :fsize 25840
    :lastmodtime '(21522 12131 0 0)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("SPLAY_EMPTY" (spp-arg-list ("head") 3338 . 3344) . ((semantic-list "(SPLAY_ROOT(head) == NULL)" 3346 . 3372)))
          ("SPLAY_FIND" (spp-arg-list ("name" "x" "y") 10089 . 10101) . ((spp-symbol-merge ((symbol "name" 10103 . 10107) (symbol "_SPLAY_FIND" 10109 . 10120)) 10103 . 10120) (semantic-list "(x, y)" 10120 . 10126)))
          ("RB_ROTATE_RIGHT" (spp-arg-list ("head" "elm" "tmp" "field") 12589 . 12612) . 
              ((DO "do" 12613 . 12615) (semantic-list "{			\\
	(tmp) = RB_LEFT(elm, field);					\\
	if ((RB_LEFT(elm, field) = RB_RIGHT(tmp, field)) != NULL) {	\\
		RB_PARENT(RB_RIGHT(tmp, field), field) = (elm);		\\
	}								\\
	RB_AUGMENT(elm);						\\
	if ((RB_PARENT(tmp, field) = RB_PARENT(elm, field)) != NULL) {	\\
		if ((elm) == RB_LEFT(RB_PARENT(elm, field), field))	\\
			RB_LEFT(RB_PARENT(elm, field), field) = (tmp);	\\
		else							\\
			RB_RIGHT(RB_PARENT(elm, field), field) = (tmp);	\\
	} else								\\
		(head)->rbh_root = (tmp);				\\
	RB_RIGHT(tmp, field) = (elm);					\\
	RB_PARENT(elm, field) = (tmp);					\\
	RB_AUGMENT(tmp);						\\
	if ((RB_PARENT(tmp, field)))					\\
		RB_AUGMENT(RB_PARENT(tmp, field));			\\
}" 12616 . 13281) (WHILE "while" 13282 . 13287)))
          ("SPLAY_INITIALIZER" (spp-arg-list ("root") 2895 . 2901) . ((semantic-list "{ NULL }" 2910 . 2918)))
          ("SPLAY_LEFT" (spp-arg-list ("elm" "field") 3184 . 3196) . 
              ((semantic-list "(elm)" 3198 . 3203) (punctuation "-" 3203 . 3204) (punctuation ">" 3204 . 3205) (symbol "field" 3205 . 3210) (punctuation "." 3210 . 3211) (symbol "spe_left" 3211 . 3219)))
          ("SPLAY_REMOVE" (spp-arg-list ("name" "x" "y") 10032 . 10044) . ((spp-symbol-merge ((symbol "name" 10045 . 10049) (symbol "_SPLAY_REMOVE" 10051 . 10064)) 10045 . 10064) (semantic-list "(x, y)" 10064 . 10070)))
          ("RB_BLACK" . ((number "0" 10839 . 10840)))
          ("RB_FIND" (spp-arg-list ("name" "x" "y") 24603 . 24615) . ((spp-symbol-merge ((symbol "name" 24616 . 24620) (symbol "_RB_FIND" 24622 . 24630)) 24616 . 24630) (semantic-list "(x, y)" 24630 . 24636)))
          ("SPLAY_GENERATE" (spp-arg-list ("name" "type" "field" "cmp") 6100 . 6124) . 
              ((STRUCT "struct" 6130 . 6136) (symbol "type" 6137 . 6141) (punctuation "*" 6142 . 6143) (spp-symbol-merge ((symbol "name" 6153 . 6157) (symbol "_SPLAY_INSERT" 6159 . 6172)) 6153 . 6172) (semantic-list "(struct name *head, struct type *elm)" 6172 . 6209) (semantic-list "{									\\
    if (SPLAY_EMPTY(head)) {						\\
	    SPLAY_LEFT(elm, field) = SPLAY_RIGHT(elm, field) = NULL;	\\
    } else {								\\
	    int __comp;							\\
	    name##_SPLAY(head, elm);					\\
	    __comp = (cmp)(elm, (head)->sph_root);			\\
	    if(__comp < 0) {						\\
		    SPLAY_LEFT(elm, field) = SPLAY_LEFT((head)->sph_root, field);\\
		    SPLAY_RIGHT(elm, field) = (head)->sph_root;		\\
		    SPLAY_LEFT((head)->sph_root, field) = NULL;		\\
	    } else if (__comp > 0) {					\\
		    SPLAY_RIGHT(elm, field) = SPLAY_RIGHT((head)->sph_root, field);\\
		    SPLAY_LEFT(elm, field) = (head)->sph_root;		\\
		    SPLAY_RIGHT((head)->sph_root, field) = NULL;	\\
	    } else							\\
		    return ((head)->sph_root);				\\
    }									\\
    (head)->sph_root = (elm);						\\
    return (NULL);							\\
}" 6213 . 7011) (STRUCT "struct" 7033 . 7039) (symbol "type" 7040 . 7044) (punctuation "*" 7045 . 7046) (spp-symbol-merge ((symbol "name" 7056 . 7060) (symbol "_SPLAY_REMOVE" 7062 . 7075)) 7056 . 7075) (semantic-list "(struct name *head, struct type *elm)" 7075 . 7112) (semantic-list "{									\\
	struct type *__tmp;						\\
	if (SPLAY_EMPTY(head))						\\
		return (NULL);						\\
	name##_SPLAY(head, elm);					\\
	if ((cmp)(elm, (head)->sph_root) == 0) {			\\
		if (SPLAY_LEFT((head)->sph_root, field) == NULL) {	\\
			(head)->sph_root = SPLAY_RIGHT((head)->sph_root, field);\\
		} else {						\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			(head)->sph_root = SPLAY_LEFT((head)->sph_root, field);\\
			name##_SPLAY(head, elm);			\\
			SPLAY_RIGHT((head)->sph_root, field) = __tmp;	\\
		}							\\
		return (elm);						\\
	}								\\
	return (NULL);							\\
}" 7116 . 7689) (VOID "void" 7711 . 7715) (spp-symbol-merge ((symbol "name" 7726 . 7730) (symbol "_SPLAY" 7732 . 7738)) 7726 . 7738) (semantic-list "(struct name *head, struct type *elm)" 7738 . 7775) (semantic-list "{									\\
	struct type __node, *__left, *__right, *__tmp;			\\
	int __comp;							\\
\\
	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\\
	__left = __right = &__node;					\\
\\
	while ((__comp = (cmp)(elm, (head)->sph_root)) != 0) {		\\
		if (__comp < 0) {					\\
			__tmp = SPLAY_LEFT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if ((cmp)(elm, __tmp) < 0){			\\
				SPLAY_ROTATE_RIGHT(head, __tmp, field);	\\
				if (SPLAY_LEFT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKLEFT(head, __right, field);		\\
		} else if (__comp > 0) {				\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if ((cmp)(elm, __tmp) > 0){			\\
				SPLAY_ROTATE_LEFT(head, __tmp, field);	\\
				if (SPLAY_RIGHT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKRIGHT(head, __left, field);		\\
		}							\\
	}								\\
	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\\
}" 7780 . 8777) (VOID "void" 8929 . 8933) (spp-symbol-merge ((symbol "name" 8934 . 8938) (symbol "_SPLAY_MINMAX" 8940 . 8953)) 8934 . 8953) (semantic-list "(struct name *head, int __comp)" 8953 . 8984) (semantic-list "{									\\
	struct type __node, *__left, *__right, *__tmp;			\\
\\
	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\\
	__left = __right = &__node;					\\
\\
	while (1) {							\\
		if (__comp < 0) {					\\
			__tmp = SPLAY_LEFT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if (__comp < 0){				\\
				SPLAY_ROTATE_RIGHT(head, __tmp, field);	\\
				if (SPLAY_LEFT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKLEFT(head, __right, field);		\\
		} else if (__comp > 0) {				\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if (__comp > 0) {				\\
				SPLAY_ROTATE_LEFT(head, __tmp, field);	\\
				if (SPLAY_RIGHT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKRIGHT(head, __left, field);		\\
		}							\\
	}								\\
	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\\
}" 8987 . 9906)))
          ("SPLAY_FOREACH" (spp-arg-list ("x" "name" "head") 10400 . 10415) . ((FOR "for" 10423 . 10426) (semantic-list "((x) = SPLAY_MIN(name, head);				\\
	     (x) != NULL;						\\
	     (x) = SPLAY_NEXT(name, head, x))" 10427 . 10526)))
          ("RB_LEFT" (spp-arg-list ("elm" "field") 11110 . 11122) . 
              ((semantic-list "(elm)" 11124 . 11129) (punctuation "-" 11129 . 11130) (punctuation ">" 11130 . 11131) (symbol "field" 11131 . 11136) (punctuation "." 11136 . 11137) (symbol "rbe_left" 11137 . 11145)))
          ("RB_SET" (spp-arg-list ("elm" "parent" "field") 11412 . 11432) . 
              ((DO "do" 11433 . 11435) (semantic-list "{					\\
	RB_PARENT(elm, field) = parent;					\\
	RB_LEFT(elm, field) = RB_RIGHT(elm, field) = NULL;		\\
	RB_COLOR(elm, field) = RB_RED;					\\
}" 11436 . 11577) (WHILE "while" 11578 . 11583)))
          ("RB_SET_BLACKRED" (spp-arg-list ("black" "red" "field") 11626 . 11645) . 
              ((DO "do" 11646 . 11648) (semantic-list "{				\\
	RB_COLOR(black, field) = RB_BLACK;				\\
	RB_COLOR(red, field) = RB_RED;					\\
}" 11649 . 11736) (WHILE "while" 11737 . 11742)))
          ("SPLAY_LINKLEFT" (spp-arg-list ("head" "tmp" "field") 3923 . 3941) . 
              ((DO "do" 3942 . 3944) (semantic-list "{				\\
	SPLAY_LEFT(tmp, field) = (head)->sph_root;			\\
	tmp = (head)->sph_root;						\\
	(head)->sph_root = SPLAY_LEFT((head)->sph_root, field);		\\
}" 3945 . 4093) (WHILE "while" 4094 . 4099)))
          ("SPLAY_PROTOTYPE" (spp-arg-list ("name" "type" "field" "cmp") 4769 . 4793) . 
              ((VOID "void" 4799 . 4803) (spp-symbol-merge ((symbol "name" 4804 . 4808) (symbol "_SPLAY" 4810 . 4816)) 4804 . 4816) (semantic-list "(struct name *, struct type *)" 4816 . 4846) (punctuation ";" 4846 . 4847) (VOID "void" 4852 . 4856) (spp-symbol-merge ((symbol "name" 4857 . 4861) (symbol "_SPLAY_MINMAX" 4863 . 4876)) 4857 . 4876) (semantic-list "(struct name *, int)" 4876 . 4896) (punctuation ";" 4896 . 4897) (STRUCT "struct" 4903 . 4909) (symbol "type" 4910 . 4914) (punctuation "*" 4915 . 4916) (spp-symbol-merge ((symbol "name" 4916 . 4920) (symbol "_SPLAY_INSERT" 4922 . 4935)) 4916 . 4935) (semantic-list "(struct name *, struct type *)" 4935 . 4965) (punctuation ";" 4965 . 4966) (STRUCT "struct" 4970 . 4976) (symbol "type" 4977 . 4981) (punctuation "*" 4982 . 4983) (spp-symbol-merge ((symbol "name" 4983 . 4987) (symbol "_SPLAY_REMOVE" 4989 . 5002)) 4983 . 5002) (semantic-list "(struct name *, struct type *)" 5002 . 5032) (punctuation ";" 5032 . 5033) (STATIC "static" 5099 . 5105) (symbol "__inline" 5106 . 5114) (STRUCT "struct" 5115 . 5121) (symbol "type" 5122 . 5126) (punctuation "*" 5127 . 5128) (spp-symbol-merge ((symbol "name" 5136 . 5140) (symbol "_SPLAY_FIND" 5142 . 5153)) 5136 . 5153) (semantic-list "(struct name *head, struct type *elm)" 5153 . 5190) (semantic-list "{									\\
	if (SPLAY_EMPTY(head))						\\
		return(NULL);						\\
	name##_SPLAY(head, elm);					\\
	if ((cmp)(elm, (head)->sph_root) == 0)				\\
		return (head->sph_root);				\\
	return (NULL);							\\
}" 5195 . 5395) (STATIC "static" 5417 . 5423) (symbol "__inline" 5424 . 5432) (STRUCT "struct" 5433 . 5439) (symbol "type" 5440 . 5444) (punctuation "*" 5445 . 5446) (spp-symbol-merge ((symbol "name" 5454 . 5458) (symbol "_SPLAY_NEXT" 5460 . 5471)) 5454 . 5471) (semantic-list "(struct name *head, struct type *elm)" 5471 . 5508) (semantic-list "{									\\
	name##_SPLAY(head, elm);					\\
	if (SPLAY_RIGHT(elm, field) != NULL) {				\\
		elm = SPLAY_RIGHT(elm, field);				\\
		while (SPLAY_LEFT(elm, field) != NULL) {		\\
			elm = SPLAY_LEFT(elm, field);			\\
		}							\\
	} else								\\
		elm = NULL;						\\
	return (elm);							\\
}" 5513 . 5797) (STATIC "static" 5819 . 5825) (symbol "__inline" 5826 . 5834) (STRUCT "struct" 5835 . 5841) (symbol "type" 5842 . 5846) (punctuation "*" 5847 . 5848) (spp-symbol-merge ((symbol "name" 5856 . 5860) (symbol "_SPLAY_MIN_MAX" 5862 . 5876)) 5856 . 5876) (semantic-list "(struct name *head, int val)" 5876 . 5904) (semantic-list "{									\\
	name##_SPLAY_MINMAX(head, val);					\\
        return (SPLAY_ROOT(head));					\\
}" 5909 . 6002)))
          ("RB_RED" . ((number "1" 10857 . 10858)))
          ("RB_PARENT" (spp-arg-list ("elm" "field") 11216 . 11228) . 
              ((semantic-list "(elm)" 11230 . 11235) (punctuation "-" 11235 . 11236) (punctuation ">" 11236 . 11237) (symbol "field" 11237 . 11242) (punctuation "." 11242 . 11243) (symbol "rbe_parent" 11243 . 11253)))
          ("RB_EMPTY" (spp-arg-list ("head") 11364 . 11370) . ((semantic-list "(RB_ROOT(head) == NULL)" 11373 . 11396)))
          ("RB_INF" . ((number "1" 24479 . 24480)))
          ("RB_FOREACH" (spp-arg-list ("x" "name" "head") 24908 . 24923) . ((FOR "for" 24931 . 24934) (semantic-list "((x) = RB_MIN(name, head);					\\
	     (x) != NULL;						\\
	     (x) = name##_RB_NEXT(x))" 24935 . 25024)))
          ("_SYS_TREE_H_")
          ("SPLAY_RIGHT" (spp-arg-list ("elm" "field") 3239 . 3251) . 
              ((semantic-list "(elm)" 3253 . 3258) (punctuation "-" 3258 . 3259) (punctuation ">" 3259 . 3260) (symbol "field" 3260 . 3265) (punctuation "." 3265 . 3266) (symbol "spe_right" 3266 . 3275)))
          ("RB_AUGMENT" (spp-arg-list ("x") 11799 . 11802) . 
              ((DO "do" 11803 . 11805) (semantic-list "{}" 11806 . 11808) (WHILE "while" 11809 . 11814) (semantic-list "(0)" 11815 . 11818)))
          ("RB_ROTATE_LEFT" (spp-arg-list ("head" "elm" "tmp" "field") 11849 . 11872) . 
              ((DO "do" 11873 . 11875) (semantic-list "{			\\
	(tmp) = RB_RIGHT(elm, field);					\\
	if ((RB_RIGHT(elm, field) = RB_LEFT(tmp, field)) != NULL) {	\\
		RB_PARENT(RB_LEFT(tmp, field), field) = (elm);		\\
	}								\\
	RB_AUGMENT(elm);						\\
	if ((RB_PARENT(tmp, field) = RB_PARENT(elm, field)) != NULL) {	\\
		if ((elm) == RB_LEFT(RB_PARENT(elm, field), field))	\\
			RB_LEFT(RB_PARENT(elm, field), field) = (tmp);	\\
		else							\\
			RB_RIGHT(RB_PARENT(elm, field), field) = (tmp);	\\
	} else								\\
		(head)->rbh_root = (tmp);				\\
	RB_LEFT(tmp, field) = (elm);					\\
	RB_PARENT(elm, field) = (tmp);					\\
	RB_AUGMENT(tmp);						\\
	if ((RB_PARENT(tmp, field)))					\\
		RB_AUGMENT(RB_PARENT(tmp, field));			\\
}" 11876 . 12540) (WHILE "while" 12541 . 12546)))
          ("RB_FOREACH_FROM" (spp-arg-list ("x" "name" "y") 25049 . 25061) . ((FOR "for" 25069 . 25072) (semantic-list "((x) = (y);							\\
	    ((x) != NULL) && ((y) = name##_RB_NEXT(x), (x) != NULL);	\\
	     (x) = (y))" 25073 . 25173)))
          ("RB_FOREACH_REVERSE_FROM" (spp-arg-list ("x" "name" "y") 25516 . 25528) . ((FOR "for" 25535 . 25538) (semantic-list "((x) = (y);							\\
	    ((x) != NULL) && ((y) = name##_RB_PREV(x), (x) != NULL);	\\
	     (x) = (y))" 25539 . 25639)))
          ("SPLAY_HEAD" (spp-arg-list ("name" "type") 2773 . 2785) . 
              ((STRUCT "struct" 2793 . 2799) (symbol "name" 2800 . 2804) (semantic-list "{								\\
	struct type *sph_root; /* root of the tree */			\\
}" 2805 . 2868)))
          ("SPLAY_ENTRY" (spp-arg-list ("type") 3035 . 3041) . ((STRUCT "struct" 3049 . 3055) (semantic-list "{								\\
	struct type *spe_left; /* left element */			\\
	struct type *spe_right; /* right element */			\\
}" 3056 . 3164)))
          ("SPLAY_NEXT" (spp-arg-list ("name" "x" "y") 10145 . 10157) . ((spp-symbol-merge ((symbol "name" 10159 . 10163) (symbol "_SPLAY_NEXT" 10165 . 10176)) 10159 . 10176) (semantic-list "(x, y)" 10176 . 10182)))
          ("RB_GENERATE" (spp-arg-list ("name" "type" "field" "cmp") 14321 . 14345) . ((symbol "RB_GENERATE_INTERNAL" 14352 . 14372) (semantic-list "(name, type, field, cmp,)" 14372 . 14397)))
          ("RB_INSERT" (spp-arg-list ("name" "x" "y") 24499 . 24511) . ((spp-symbol-merge ((symbol "name" 24512 . 24516) (symbol "_RB_INSERT" 24518 . 24528)) 24512 . 24528) (semantic-list "(x, y)" 24528 . 24534)))
          ("RB_PREV" (spp-arg-list ("name" "x" "y") 24749 . 24761) . ((spp-symbol-merge ((symbol "name" 24762 . 24766) (symbol "_RB_PREV" 24768 . 24776)) 24762 . 24776) (semantic-list "(y)" 24776 . 24779)))
          ("RB_MAX" (spp-arg-list ("name" "x") 24850 . 24859) . ((spp-symbol-merge ((symbol "name" 24861 . 24865) (symbol "_RB_MINMAX" 24867 . 24877)) 24861 . 24877) (semantic-list "(x, RB_INF)" 24877 . 24888)))
          ("RB_HEAD" (spp-arg-list ("name" "type") 10585 . 10597) . 
              ((STRUCT "struct" 10605 . 10611) (symbol "name" 10612 . 10616) (semantic-list "{								\\
	struct type *rbh_root; /* root of the tree */			\\
}" 10617 . 10680)))
          ("RB_COLOR" (spp-arg-list ("elm" "field") 11270 . 11282) . 
              ((semantic-list "(elm)" 11284 . 11289) (punctuation "-" 11289 . 11290) (punctuation ">" 11290 . 11291) (symbol "field" 11291 . 11296) (punctuation "." 11296 . 11297) (symbol "rbe_color" 11297 . 11306)))
          ("RB_NEXT" (spp-arg-list ("name" "x" "y") 24703 . 24715) . ((spp-symbol-merge ((symbol "name" 24716 . 24720) (symbol "_RB_NEXT" 24722 . 24730)) 24716 . 24730) (semantic-list "(y)" 24730 . 24733)))
          ("RB_MIN" (spp-arg-list ("name" "x") 24794 . 24803) . ((spp-symbol-merge ((symbol "name" 24805 . 24809) (symbol "_RB_MINMAX" 24811 . 24821)) 24805 . 24821) (semantic-list "(x, RB_NEGINF)" 24821 . 24835)))
          ("SPLAY_ROOT" (spp-arg-list ("head") 3294 . 3300) . 
              ((semantic-list "(head)" 3302 . 3308) (punctuation "-" 3308 . 3309) (punctuation ">" 3309 . 3310) (symbol "sph_root" 3310 . 3318)))
          ("SPLAY_ROTATE_LEFT" (spp-arg-list ("head" "tmp" "field") 3700 . 3718) . 
              ((DO "do" 3719 . 3721) (semantic-list "{			\\
	SPLAY_RIGHT((head)->sph_root, field) = SPLAY_LEFT(tmp, field);	\\
	SPLAY_LEFT(tmp, field) = (head)->sph_root;			\\
	(head)->sph_root = tmp;						\\
}" 3722 . 3875) (WHILE "while" 3876 . 3881)))
          ("SPLAY_INF" . ((number "1" 9950 . 9951)))
          ("RB_RIGHT" (spp-arg-list ("elm" "field") 11162 . 11174) . 
              ((semantic-list "(elm)" 11176 . 11181) (punctuation "-" 11181 . 11182) (punctuation ">" 11182 . 11183) (symbol "field" 11183 . 11188) (punctuation "." 11188 . 11189) (symbol "rbe_right" 11189 . 11198)))
          ("RB_GENERATE_STATIC" (spp-arg-list ("name" "type" "field" "cmp") 14424 . 14448) . ((symbol "RB_GENERATE_INTERNAL" 14454 . 14474) (semantic-list "(name, type, field, cmp, __unused static)" 14474 . 14515)))
          ("RB_FOREACH_REVERSE" (spp-arg-list ("x" "name" "head") 25368 . 25383) . ((FOR "for" 25390 . 25393) (semantic-list "((x) = RB_MAX(name, head);					\\
	     (x) != NULL;						\\
	     (x) = name##_RB_PREV(x))" 25394 . 25483)))
          ("RB_ENTRY" (spp-arg-list ("type") 10875 . 10881) . ((STRUCT "struct" 10890 . 10896) (semantic-list "{								\\
	struct type *rbe_left;		/* left element */		\\
	struct type *rbe_right;		/* right element */		\\
	struct type *rbe_parent;	/* parent element */		\\
	int rbe_color;			/* node color */		\\
}" 10897 . 11093)))
          ("RB_ROOT" (spp-arg-list ("head") 11322 . 11328) . 
              ((semantic-list "(head)" 11331 . 11337) (punctuation "-" 11337 . 11338) (punctuation ">" 11338 . 11339) (symbol "rbh_root" 11339 . 11347)))
          ("RB_NEGINF" . ((punctuation "-" 24461 . 24462) (number "1" 24462 . 24463)))
          ("SPLAY_INSERT" (spp-arg-list ("name" "x" "y") 9973 . 9985) . ((spp-symbol-merge ((symbol "name" 9986 . 9990) (symbol "_SPLAY_INSERT" 9992 . 10005)) 9986 . 10005) (semantic-list "(x, y)" 10005 . 10011)))
          ("SPLAY_MAX" (spp-arg-list ("name" "x") 10299 . 10308) . ((semantic-list "(SPLAY_EMPTY(x) ? NULL	\\
					: name##_SPLAY_MIN_MAX(x, SPLAY_INF))" 10310 . 10377)))
          ("RB_PROTOTYPE_STATIC" (spp-arg-list ("name" "type" "field" "cmp") 13480 . 13504) . ((symbol "RB_PROTOTYPE_INTERNAL" 13510 . 13531) (semantic-list "(name, type, field, cmp, __unused static)" 13531 . 13572)))
          ("SPLAY_INIT" (spp-arg-list ("root") 2938 . 2944) . 
              ((DO "do" 2945 . 2947) (semantic-list "{						\\
	(root)->sph_root = NULL;					\\
}" 2948 . 2990) (WHILE "while" 2991 . 2996)))
          ("SPLAY_LINKRIGHT" (spp-arg-list ("head" "tmp" "field") 4142 . 4160) . 
              ((DO "do" 4161 . 4163) (semantic-list "{				\\
	SPLAY_RIGHT(tmp, field) = (head)->sph_root;			\\
	tmp = (head)->sph_root;						\\
	(head)->sph_root = SPLAY_RIGHT((head)->sph_root, field);	\\
}" 4164 . 4313) (WHILE "while" 4314 . 4319)))
          ("SPLAY_ASSEMBLE" (spp-arg-list ("head" "node" "left" "right" "field") 4361 . 4393) . 
              ((DO "do" 4394 . 4396) (semantic-list "{		\\
	SPLAY_RIGHT(left, field) = SPLAY_LEFT((head)->sph_root, field);	\\
	SPLAY_LEFT(right, field) = SPLAY_RIGHT((head)->sph_root, field);\\
	SPLAY_LEFT((head)->sph_root, field) = SPLAY_RIGHT(node, field);	\\
	SPLAY_RIGHT((head)->sph_root, field) = SPLAY_LEFT(node, field);	\\
}" 4397 . 4671) (WHILE "while" 4672 . 4677)))
          ("SPLAY_MIN" (spp-arg-list ("name" "x") 10200 . 10209) . ((semantic-list "(SPLAY_EMPTY(x) ? NULL	\\
					: name##_SPLAY_MIN_MAX(x, SPLAY_NEGINF))" 10211 . 10281)))
          ("RB_REMOVE" (spp-arg-list ("name" "x" "y") 24552 . 24564) . ((spp-symbol-merge ((symbol "name" 24565 . 24569) (symbol "_RB_REMOVE" 24571 . 24581)) 24565 . 24581) (semantic-list "(x, y)" 24581 . 24587)))
          ("RB_INITIALIZER" (spp-arg-list ("root") 10704 . 10710) . ((semantic-list "{ NULL }" 10719 . 10727)))
          ("RB_INIT" (spp-arg-list ("root") 10744 . 10750) . 
              ((DO "do" 10751 . 10753) (semantic-list "{						\\
	(root)->rbh_root = NULL;					\\
}" 10754 . 10796) (WHILE "while" 10797 . 10802)))
          ("RB_GENERATE_INTERNAL" (spp-arg-list ("name" "type" "field" "cmp" "attr") 14544 . 14574) . 
              ((symbol "attr" 14578 . 14582) (VOID "void" 14583 . 14587) (spp-symbol-merge ((symbol "name" 14597 . 14601) (symbol "_RB_INSERT_COLOR" 14603 . 14619)) 14597 . 14619) (semantic-list "(struct name *head, struct type *elm)" 14619 . 14656) (semantic-list "{									\\
	struct type *parent, *gparent, *tmp;				\\
	while ((parent = RB_PARENT(elm, field)) != NULL &&		\\
	    RB_COLOR(parent, field) == RB_RED) {			\\
		gparent = RB_PARENT(parent, field);			\\
		if (parent == RB_LEFT(gparent, field)) {		\\
			tmp = RB_RIGHT(gparent, field);			\\
			if (tmp && RB_COLOR(tmp, field) == RB_RED) {	\\
				RB_COLOR(tmp, field) = RB_BLACK;	\\
				RB_SET_BLACKRED(parent, gparent, field);\\
				elm = gparent;				\\
				continue;				\\
			}						\\
			if (RB_RIGHT(parent, field) == elm) {		\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				tmp = parent;				\\
				parent = elm;				\\
				elm = tmp;				\\
			}						\\
			RB_SET_BLACKRED(parent, gparent, field);	\\
			RB_ROTATE_RIGHT(head, gparent, tmp, field);	\\
		} else {						\\
			tmp = RB_LEFT(gparent, field);			\\
			if (tmp && RB_COLOR(tmp, field) == RB_RED) {	\\
				RB_COLOR(tmp, field) = RB_BLACK;	\\
				RB_SET_BLACKRED(parent, gparent, field);\\
				elm = gparent;				\\
				continue;				\\
			}						\\
			if (RB_LEFT(parent, field) == elm) {		\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				tmp = parent;				\\
				parent = elm;				\\
				elm = tmp;				\\
			}						\\
			RB_SET_BLACKRED(parent, gparent, field);	\\
			RB_ROTATE_LEFT(head, gparent, tmp, field);	\\
		}							\\
	}								\\
	RB_COLOR(head->rbh_root, field) = RB_BLACK;			\\
}" 14660 . 15980) (symbol "attr" 16002 . 16006) (VOID "void" 16007 . 16011) (spp-symbol-merge ((symbol "name" 16021 . 16025) (symbol "_RB_REMOVE_COLOR" 16027 . 16043)) 16021 . 16043) (semantic-list "(struct name *head, struct type *parent, struct type *elm)" 16043 . 16101) (semantic-list "{									\\
	struct type *tmp;						\\
	while ((elm == NULL || RB_COLOR(elm, field) == RB_BLACK) &&	\\
	    elm != RB_ROOT(head)) {					\\
		if (RB_LEFT(parent, field) == elm) {			\\
			tmp = RB_RIGHT(parent, field);			\\
			if (RB_COLOR(tmp, field) == RB_RED) {		\\
				RB_SET_BLACKRED(tmp, parent, field);	\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				tmp = RB_RIGHT(parent, field);		\\
			}						\\
			if ((RB_LEFT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) &&\\
			    (RB_RIGHT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK)) {\\
				RB_COLOR(tmp, field) = RB_RED;		\\
				elm = parent;				\\
				parent = RB_PARENT(elm, field);		\\
			} else {					\\
				if (RB_RIGHT(tmp, field) == NULL ||	\\
				    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK) {\\
					struct type *oleft;		\\
					if ((oleft = RB_LEFT(tmp, field)) \\
					    != NULL)			\\
						RB_COLOR(oleft, field) = RB_BLACK;\\
					RB_COLOR(tmp, field) = RB_RED;	\\
					RB_ROTATE_RIGHT(head, tmp, oleft, field);\\
					tmp = RB_RIGHT(parent, field);	\\
				}					\\
				RB_COLOR(tmp, field) = RB_COLOR(parent, field);\\
				RB_COLOR(parent, field) = RB_BLACK;	\\
				if (RB_RIGHT(tmp, field))		\\
					RB_COLOR(RB_RIGHT(tmp, field), field) = RB_BLACK;\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				elm = RB_ROOT(head);			\\
				break;					\\
			}						\\
		} else {						\\
			tmp = RB_LEFT(parent, field);			\\
			if (RB_COLOR(tmp, field) == RB_RED) {		\\
				RB_SET_BLACKRED(tmp, parent, field);	\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				tmp = RB_LEFT(parent, field);		\\
			}						\\
			if ((RB_LEFT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) &&\\
			    (RB_RIGHT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK)) {\\
				RB_COLOR(tmp, field) = RB_RED;		\\
				elm = parent;				\\
				parent = RB_PARENT(elm, field);		\\
			} else {					\\
				if (RB_LEFT(tmp, field) == NULL ||	\\
				    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) {\\
					struct type *oright;		\\
					if ((oright = RB_RIGHT(tmp, field)) \\
					    != NULL)			\\
						RB_COLOR(oright, field) = RB_BLACK;\\
					RB_COLOR(tmp, field) = RB_RED;	\\
					RB_ROTATE_LEFT(head, tmp, oright, field);\\
					tmp = RB_LEFT(parent, field);	\\
				}					\\
				RB_COLOR(tmp, field) = RB_COLOR(parent, field);\\
				RB_COLOR(parent, field) = RB_BLACK;	\\
				if (RB_LEFT(tmp, field))		\\
					RB_COLOR(RB_LEFT(tmp, field), field) = RB_BLACK;\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				elm = RB_ROOT(head);			\\
				break;					\\
			}						\\
		}							\\
	}								\\
	if (elm)							\\
		RB_COLOR(elm, field) = RB_BLACK;			\\
}" 16104 . 18802) (symbol "attr" 18824 . 18828) (STRUCT "struct" 18829 . 18835) (symbol "type" 18836 . 18840) (punctuation "*" 18841 . 18842) (spp-symbol-merge ((symbol "name" 18851 . 18855) (symbol "_RB_REMOVE" 18857 . 18867)) 18851 . 18867) (semantic-list "(struct name *head, struct type *elm)" 18867 . 18904) (semantic-list "{									\\
	struct type *child, *parent, *old = elm;			\\
	int color;							\\
	if (RB_LEFT(elm, field) == NULL)				\\
		child = RB_RIGHT(elm, field);				\\
	else if (RB_RIGHT(elm, field) == NULL)				\\
		child = RB_LEFT(elm, field);				\\
	else {								\\
		struct type *left;					\\
		elm = RB_RIGHT(elm, field);				\\
		while ((left = RB_LEFT(elm, field)) != NULL)		\\
			elm = left;					\\
		child = RB_RIGHT(elm, field);				\\
		parent = RB_PARENT(elm, field);				\\
		color = RB_COLOR(elm, field);				\\
		if (child)						\\
			RB_PARENT(child, field) = parent;		\\
		if (parent) {						\\
			if (RB_LEFT(parent, field) == elm)		\\
				RB_LEFT(parent, field) = child;		\\
			else						\\
				RB_RIGHT(parent, field) = child;	\\
			RB_AUGMENT(parent);				\\
		} else							\\
			RB_ROOT(head) = child;				\\
		if (RB_PARENT(elm, field) == old)			\\
			parent = elm;					\\
		(elm)->field = (old)->field;				\\
		if (RB_PARENT(old, field)) {				\\
			if (RB_LEFT(RB_PARENT(old, field), field) == old)\\
				RB_LEFT(RB_PARENT(old, field), field) = elm;\\
			else						\\
				RB_RIGHT(RB_PARENT(old, field), field) = elm;\\
			RB_AUGMENT(RB_PARENT(old, field));		\\
		} else							\\
			RB_ROOT(head) = elm;				\\
		RB_PARENT(RB_LEFT(old, field), field) = elm;		\\
		if (RB_RIGHT(old, field))				\\
			RB_PARENT(RB_RIGHT(old, field), field) = elm;	\\
		if (parent) {						\\
			left = parent;					\\
			do {						\\
				RB_AUGMENT(left);			\\
			} while ((left = RB_PARENT(left, field)) != NULL); \\
		}							\\
		goto color;						\\
	}								\\
	parent = RB_PARENT(elm, field);					\\
	color = RB_COLOR(elm, field);					\\
	if (child)							\\
		RB_PARENT(child, field) = parent;			\\
	if (parent) {							\\
		if (RB_LEFT(parent, field) == elm)			\\
			RB_LEFT(parent, field) = child;			\\
		else							\\
			RB_RIGHT(parent, field) = child;		\\
		RB_AUGMENT(parent);					\\
	} else								\\
		RB_ROOT(head) = child;					\\
color:									\\
	if (color == RB_BLACK)						\\
		name##_RB_REMOVE_COLOR(head, parent, child);		\\
	return (old);							\\
}" 18909 . 20906) (symbol "attr" 20972 . 20976) (STRUCT "struct" 20977 . 20983) (symbol "type" 20984 . 20988) (punctuation "*" 20989 . 20990) (spp-symbol-merge ((symbol "name" 20999 . 21003) (symbol "_RB_INSERT" 21005 . 21015)) 20999 . 21015) (semantic-list "(struct name *head, struct type *elm)" 21015 . 21052) (semantic-list "{									\\
	struct type *tmp;						\\
	struct type *parent = NULL;					\\
	int comp = 0;							\\
	tmp = RB_ROOT(head);						\\
	while (tmp) {							\\
		parent = tmp;						\\
		comp = (cmp)(elm, parent);				\\
		if (comp < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	RB_SET(elm, parent, field);					\\
	if (parent != NULL) {						\\
		if (comp < 0)						\\
			RB_LEFT(parent, field) = elm;			\\
		else							\\
			RB_RIGHT(parent, field) = elm;			\\
		RB_AUGMENT(parent);					\\
	} else								\\
		RB_ROOT(head) = elm;					\\
	name##_RB_INSERT_COLOR(head, elm);				\\
	return (NULL);							\\
}" 21057 . 21749) (symbol "attr" 21822 . 21826) (STRUCT "struct" 21827 . 21833) (symbol "type" 21834 . 21838) (punctuation "*" 21839 . 21840) (spp-symbol-merge ((symbol "name" 21849 . 21853) (symbol "_RB_FIND" 21855 . 21863)) 21849 . 21863) (semantic-list "(struct name *head, struct type *elm)" 21863 . 21900) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	int comp;							\\
	while (tmp) {							\\
		comp = cmp(elm, tmp);					\\
		if (comp < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	return (NULL);							\\
}" 21905 . 22223) (symbol "attr" 22314 . 22318) (STRUCT "struct" 22319 . 22325) (symbol "type" 22326 . 22330) (punctuation "*" 22331 . 22332) (spp-symbol-merge ((symbol "name" 22341 . 22345) (symbol "_RB_NFIND" 22347 . 22356)) 22341 . 22356) (semantic-list "(struct name *head, struct type *elm)" 22356 . 22393) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	struct type *res = NULL;					\\
	int comp;							\\
	while (tmp) {							\\
		comp = cmp(elm, tmp);					\\
		if (comp < 0) {						\\
			res = tmp;					\\
			tmp = RB_LEFT(tmp, field);			\\
		}							\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	return (res);							\\
}" 22398 . 22781) (symbol "attr" 22827 . 22831) (STRUCT "struct" 22832 . 22838) (symbol "type" 22839 . 22843) (punctuation "*" 22844 . 22845) (spp-symbol-merge ((symbol "name" 22854 . 22858) (symbol "_RB_NEXT" 22860 . 22868)) 22854 . 22868) (semantic-list "(struct type *elm)" 22868 . 22886) (semantic-list "{									\\
	if (RB_RIGHT(elm, field)) {					\\
		elm = RB_RIGHT(elm, field);				\\
		while (RB_LEFT(elm, field))				\\
			elm = RB_LEFT(elm, field);			\\
	} else {							\\
		if (RB_PARENT(elm, field) &&				\\
		    (elm == RB_LEFT(RB_PARENT(elm, field), field)))	\\
			elm = RB_PARENT(elm, field);			\\
		else {							\\
			while (RB_PARENT(elm, field) &&			\\
			    (elm == RB_RIGHT(RB_PARENT(elm, field), field)))\\
				elm = RB_PARENT(elm, field);		\\
			elm = RB_PARENT(elm, field);			\\
		}							\\
	}								\\
	return (elm);							\\
}" 22893 . 23423) (symbol "attr" 23469 . 23473) (STRUCT "struct" 23474 . 23480) (symbol "type" 23481 . 23485) (punctuation "*" 23486 . 23487) (spp-symbol-merge ((symbol "name" 23496 . 23500) (symbol "_RB_PREV" 23502 . 23510)) 23496 . 23510) (semantic-list "(struct type *elm)" 23510 . 23528) (semantic-list "{									\\
	if (RB_LEFT(elm, field)) {					\\
		elm = RB_LEFT(elm, field);				\\
		while (RB_RIGHT(elm, field))				\\
			elm = RB_RIGHT(elm, field);			\\
	} else {							\\
		if (RB_PARENT(elm, field) &&				\\
		    (elm == RB_RIGHT(RB_PARENT(elm, field), field)))	\\
			elm = RB_PARENT(elm, field);			\\
		else {							\\
			while (RB_PARENT(elm, field) &&			\\
			    (elm == RB_LEFT(RB_PARENT(elm, field), field)))\\
				elm = RB_PARENT(elm, field);		\\
			elm = RB_PARENT(elm, field);			\\
		}							\\
	}								\\
	return (elm);							\\
}" 23535 . 24065) (symbol "attr" 24087 . 24091) (STRUCT "struct" 24092 . 24098) (symbol "type" 24099 . 24103) (punctuation "*" 24104 . 24105) (spp-symbol-merge ((symbol "name" 24114 . 24118) (symbol "_RB_MINMAX" 24120 . 24130)) 24114 . 24130) (semantic-list "(struct name *head, int val)" 24130 . 24158) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	struct type *parent = NULL;					\\
	while (tmp) {							\\
		parent = tmp;						\\
		if (val < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else							\\
			tmp = RB_RIGHT(tmp, field);			\\
	}								\\
	return (parent);						\\
}" 24164 . 24441)))
          ("RB_FOREACH_SAFE" (spp-arg-list ("x" "name" "head" "y") 25198 . 25216) . ((FOR "for" 25223 . 25226) (semantic-list "((x) = RB_MIN(name, head);					\\
	    ((x) != NULL) && ((y) = name##_RB_NEXT(x), (x) != NULL);	\\
	     (x) = (y))" 25227 . 25340)))
          ("RB_FOREACH_REVERSE_SAFE" (spp-arg-list ("x" "name" "head" "y") 25672 . 25690) . ((FOR "for" 25696 . 25699) (semantic-list "((x) = RB_MAX(name, head);					\\
	    ((x) != NULL) && ((y) = name##_RB_PREV(x), (x) != NULL);	\\
	     (x) = (y))" 25700 . 25813)))
          ("SPLAY_ROTATE_RIGHT" (spp-arg-list ("head" "tmp" "field") 3472 . 3490) . 
              ((DO "do" 3491 . 3493) (semantic-list "{			\\
	SPLAY_LEFT((head)->sph_root, field) = SPLAY_RIGHT(tmp, field);	\\
	SPLAY_RIGHT(tmp, field) = (head)->sph_root;			\\
	(head)->sph_root = tmp;						\\
}" 3494 . 3648) (WHILE "while" 3649 . 3654)))
          ("SPLAY_NEGINF" . ((punctuation "-" 9929 . 9930) (number "1" 9930 . 9931)))
          ("RB_PROTOTYPE" (spp-arg-list ("name" "type" "field" "cmp") 13375 . 13399) . ((symbol "RB_PROTOTYPE_INTERNAL" 13406 . 13427) (semantic-list "(name, type, field, cmp,)" 13427 . 13452)))
          ("RB_PROTOTYPE_INTERNAL" (spp-arg-list ("name" "type" "field" "cmp" "attr") 13602 . 13632) . 
              ((symbol "attr" 13636 . 13640) (VOID "void" 13641 . 13645) (spp-symbol-merge ((symbol "name" 13646 . 13650) (symbol "_RB_INSERT_COLOR" 13652 . 13668)) 13646 . 13668) (semantic-list "(struct name *, struct type *)" 13668 . 13698) (punctuation ";" 13698 . 13699) (symbol "attr" 13703 . 13707) (VOID "void" 13708 . 13712) (spp-symbol-merge ((symbol "name" 13713 . 13717) (symbol "_RB_REMOVE_COLOR" 13719 . 13735)) 13713 . 13735) (semantic-list "(struct name *, struct type *, struct type *)" 13735 . 13780) (punctuation ";" 13780 . 13781) (symbol "attr" 13783 . 13787) (STRUCT "struct" 13788 . 13794) (symbol "type" 13795 . 13799) (punctuation "*" 13800 . 13801) (spp-symbol-merge ((symbol "name" 13801 . 13805) (symbol "_RB_REMOVE" 13807 . 13817)) 13801 . 13817) (semantic-list "(struct name *, struct type *)" 13817 . 13847) (punctuation ";" 13847 . 13848) (symbol "attr" 13851 . 13855) (STRUCT "struct" 13856 . 13862) (symbol "type" 13863 . 13867) (punctuation "*" 13868 . 13869) (spp-symbol-merge ((symbol "name" 13869 . 13873) (symbol "_RB_INSERT" 13875 . 13885)) 13869 . 13885) (semantic-list "(struct name *, struct type *)" 13885 . 13915) (punctuation ";" 13915 . 13916) (symbol "attr" 13919 . 13923) (STRUCT "struct" 13924 . 13930) (symbol "type" 13931 . 13935) (punctuation "*" 13936 . 13937) (spp-symbol-merge ((symbol "name" 13937 . 13941) (symbol "_RB_FIND" 13943 . 13951)) 13937 . 13951) (semantic-list "(struct name *, struct type *)" 13951 . 13981) (punctuation ";" 13981 . 13982) (symbol "attr" 13986 . 13990) (STRUCT "struct" 13991 . 13997) (symbol "type" 13998 . 14002) (punctuation "*" 14003 . 14004) (spp-symbol-merge ((symbol "name" 14004 . 14008) (symbol "_RB_NFIND" 14010 . 14019)) 14004 . 14019) (semantic-list "(struct name *, struct type *)" 14019 . 14049) (punctuation ";" 14049 . 14050) (symbol "attr" 14053 . 14057) (STRUCT "struct" 14058 . 14064) (symbol "type" 14065 . 14069) (punctuation "*" 14070 . 14071) (spp-symbol-merge ((symbol "name" 14071 . 14075) (symbol "_RB_NEXT" 14077 . 14085)) 14071 . 14085) (semantic-list "(struct type *)" 14085 . 14100) (punctuation ";" 14100 . 14101) (symbol "attr" 14106 . 14110) (STRUCT "struct" 14111 . 14117) (symbol "type" 14118 . 14122) (punctuation "*" 14123 . 14124) (spp-symbol-merge ((symbol "name" 14124 . 14128) (symbol "_RB_PREV" 14130 . 14138)) 14124 . 14138) (semantic-list "(struct type *)" 14138 . 14153) (punctuation ";" 14153 . 14154) (symbol "attr" 14159 . 14163) (STRUCT "struct" 14164 . 14170) (symbol "type" 14171 . 14175) (punctuation "*" 14176 . 14177) (spp-symbol-merge ((symbol "name" 14177 . 14181) (symbol "_RB_MINMAX" 14183 . 14193)) 14177 . 14193) (semantic-list "(struct name *, int)" 14193 . 14213) (punctuation ";" 14213 . 14214)))
          ("RB_NFIND" (spp-arg-list ("name" "x" "y") 24653 . 24665) . ((spp-symbol-merge ((symbol "name" 24666 . 24670) (symbol "_RB_NFIND" 24672 . 24681)) 24666 . 24681) (semantic-list "(x, y)" 24681 . 24687)))
          )

    )
   )
  :file "!Users!huangyong!Document!TreeTest!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
