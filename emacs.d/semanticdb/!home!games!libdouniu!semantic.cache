;; Object libdouniu/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "libdouniu/"
  :tables
  (list
    (semanticdb-table "test.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("card.h" include nil nil [1 18])
            ("deck.h" include nil nil [19 36])
            ("hole_cards.h" include nil nil [37 60])
            ("string.h" include (:system-flag t) nil [61 80])
            ("map" include (:system-flag t) nil [81 95])
            ("sys/time.h" include (:system-flag t) nil [96 117])
            ("cardmap" variable (:type ("map" type
                 (:template-specifier 
                    ( ("string" type nil nil nil)
                      ("int" type nil nil nil))                    
                  :type "class")
                  nil nil)) nil [120 145])
            ("card_type_str" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
	(char *)\"CARD_TYPE_NONNIU\",
	(char *)\"CARD_TYPE_NIUDING\",
	(char *)\"CARD_TYPE_NIUER\",
	(char *)\"CARD_TYPE_NIUSAN\",
	(char *)\"CARD_TYPE_NIUSI\",
	(char *)\"CARD_TYPE_NIUWU\",
	(char *)\"CARD_TYPE_NIULIU\",
	(char *)\"CARD_TYPE_NIUQI\",
	(char *)\"CARD_TYPE_NIUBA\",
	(char *)\"CARD_TYPE_NIUJIU\",
	(char *)\"CARD_TYPE_NIUNIU\",
    (char *)\"CARD_TYPE_ZHADAN\",
	(char *)\"CARD_TYPE_JINNIU\",	
	(char *)\"CARD_TYPE_WUXIAONIU\"
}"
                :type "char")
                nil [147 597])
            ("vcard_ratio" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
	CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_LESS,
    CARD_RATIO_QI,
	CARD_RATIO_NIUBA,
	CARD_RATIO_NIUJIU,
	CARD_RATIO_NIUNIU,
	CARD_RATIO_ZHADAN,
    CARD_RATIO_JINNIU,
	CARD_RATIO_WUXIAONIU,
}"
                :type "int")
                nil [599 924])
            ("initCardMap" function (:type "void") nil [1607 3050])
            ("testzhatan" function (:type "void") nil [3052 3750])
            ("testwuhuaniu" function (:type "void") nil [3752 4513])
            ("testzhadan1" function (:type "void") nil [4516 5351])
            ("count_type_num" function (:type "void") nil [5354 7410])
            ("test_shuffle" function (:type "void") nil [7413 9576])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [9587 9596])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [9597 9610]))                  
                :type "int")
                nil [9578 13059]))          
      :file "test.cc"
      :pointmax 13061
      :fsize 13995
      :lastmodtime '(21911 44399 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "card.h"
      :file "card.h"
      :fsize 2921
      :lastmodtime '(21902 19631 0 0))
    (semanticdb-table "deck.h"
      :file "deck.h"
      :fsize 1528
      :lastmodtime '(21911 41190 0 0))
    (semanticdb-table "hole_cards.h"
      :file "hole_cards.h"
      :fsize 623
      :lastmodtime '(21907 43301 0 0))
    (semanticdb-table "deck.cc"
      :major-mode 'c++-mode
      :tags 
        '( ("algorithm" include (:system-flag t) nil [1 21])
            ("deck.h" include nil nil [22 39])
            ("card_arr" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
    0x01, 0x11, 0x21, 0x31,		//A 14 
    0x02, 0x12, 0x22, 0x32,		//2 15
    0x03, 0x13, 0x23, 0x33,		//3 3
    0x04, 0x14, 0x24, 0x34,		//4 4
    0x05, 0x15, 0x25, 0x35,		//5 5
    0x06, 0x16, 0x26, 0x36,		//6 6
    0x07, 0x17, 0x27, 0x37,		//7 7
    0x08, 0x18, 0x28, 0x38,		//8 8
    0x09, 0x19, 0x29, 0x39,		//9 9
    0x0A, 0x1A, 0x2A, 0x3A,		//10 10
    0x0B, 0x1B, 0x2B, 0x3B,		//J 11
    0x0C, 0x1C, 0x2C, 0x3C,		//Q 12
    0x0D, 0x1D, 0x2D, 0x3D,		//K 13
}"
                :type "int")
                nil [41 532])
            ("fill" function
               (:parent "Deck"
                :type "void")
                nil [534 642])
            ("empty" function
               (:parent "Deck"
                :type "void")
                nil [644 682])
            ("count" function
               (:parent "Deck"
                :type "int")
                nil [684 733])
            ("push" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable (:type ("Card" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [751 761]))                  
                :type "bool")
                nil [735 803])
            ("pop" function
               (:parent "Deck"
                :arguments 
                  ( ("card" variable
                       (:reference 1
                        :type ("Card" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [820 831]))                  
                :type "bool")
                nil [805 923])
            ("shuffle" function
               (:parent "Deck"
                :arguments 
                  ( ("seed" variable (:type "int") (reparse-symbol arg-sub-list) [944 953]))                  
                :type "bool")
                nil [925 1046])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1073 1094]))                  
                :type "int")
                nil [1048 1223])
            ("change_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [1254 1262])
                    ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1263 1284]))                  
                :type "void")
                nil [1225 1427])
            ("has_hole_cards" function
               (:parent "Deck"
                :type "bool")
                nil [1429 1558])
            ("debug" function
               (:parent "Deck"
                :type "void")
                nil [1560 1608])
            ("get_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1635 1656])
                    ("type" variable (:type "int") (reparse-symbol arg-sub-list) [1657 1666]))                  
                :type "int")
                nil [1610 2818])
            ("get_has_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2853 2874]))                  
                :type "int")
                nil [2820 2992])
            ("get_no_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3026 3047]))                  
                :type "int")
                nil [2994 3114])
            ("get_niu_jiu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3149 3170]))                  
                :type "int")
                nil [3116 3235])
            ("get_niu_ba_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3269 3290]))                  
                :type "int")
                nil [3237 3354])
            ("get_niu_qi_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3388 3409]))                  
                :type "int")
                nil [3356 3473])
            ("get_niu_liu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3508 3529]))                  
                :type "int")
                nil [3475 3594])
            ("get_niu_wu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3628 3649]))                  
                :type "int")
                nil [3596 3713])
            ("get_niu_si_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3747 3768]))                  
                :type "int")
                nil [3715 3832])
            ("get_niu_san_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3867 3888]))                  
                :type "int")
                nil [3834 3953])
            ("get_niu_er_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3987 4008]))                  
                :type "int")
                nil [3955 4072])
            ("get_niu_ding_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4108 4129]))                  
                :type "int")
                nil [4074 4195])
            ("get_zhadan_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4229 4250]))                  
                :type "int")
                nil [4197 7549])
            ("get_wuhuaniu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7585 7606]))                  
                :type "int")
                nil [7551 9154])
            ("get_wuxiaoniu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9191 9212]))                  
                :type "int")
                nil [9156 11016])
            ("get_niu_niu_hole_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11051 11072]))                  
                :type "int")
                nil [11018 11137])
            ("deck_random" function
               (:parent "Deck"
                :arguments 
                  ( ("begin" variable (:type "int") (reparse-symbol arg-sub-list) [11161 11171])
                    ("end" variable (:type "int") (reparse-symbol arg-sub-list) [11172 11180]))                  
                :type "int")
                nil [11139 11254])
            ("delete_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("tmp" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("Card" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11280 11303]))                  
                :type "void")
                nil [11256 11676])
            ("get_hole_type_cards" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11708 11729])
                    ("type" variable (:type "int") (reparse-symbol arg-sub-list) [11730 11739]))                  
                :type "int")
                nil [11678 13730])
            ("has_niu" function
               (:parent "Deck"
                :arguments 
                  ( ("holecards" variable
                       (:reference 1
                        :type ("HoleCards" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13751 13772]))                  
                :type "bool")
                nil [13732 14429]))          
      :file "deck.cc"
      :pointmax 14430
      :fsize 14985
      :lastmodtime '(21911 61090 763393 970000)
      :unmatched-syntax nil))
  :file "!home!games!libdouniu!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
